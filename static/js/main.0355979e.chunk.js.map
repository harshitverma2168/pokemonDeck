{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","pokemon","name","generation","CardList","map","key","id","SeacrhBox","placeholder","changeHandler","type","onChange","App","pokemonArray","state","searchFeild","axios","get","then","response","setState","data","catch","this","filteredPokemon","filter","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAEaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBAEX,yBAAKC,IAAI,UAAUD,UAAU,QAAQE,IAAG,4CAAuCH,EAAMI,QAAQC,KAArD,UACxC,wBAAIJ,UAAU,OAAOD,EAAMI,QAAQC,MACnC,2BAAIL,EAAMI,QAAQE,eCHbC,EAAW,SAAAP,GACpB,OAAO,yBAAKC,UAAU,aAAaD,EAAMI,QAAQI,KAAI,SAAAJ,GAAO,OACxD,kBAAC,EAAD,CAAMK,IAAKL,EAAQM,GAAIN,QAAUA,SCJ5BO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,cAAhB,OACpB,2BAAOC,KAAK,OACTb,UAAU,SACVW,YAAaA,EACbG,SAAUF,M,iBCuHHG,E,YAvHb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAQRiB,aAAgB,CACZ,CACE,GAAM,EACN,KAAQ,YACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,QACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,UACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,SACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,UACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,YACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,SACR,WAAc,eAEhB,CACE,GAAM,EACN,KAAQ,YACR,WAAc,cAEhB,CACE,GAAM,EACN,KAAQ,UACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,WACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,UACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,aACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,aACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,WACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,YACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,YACR,WAAc,eAEhB,CACE,GAAM,GACN,KAAQ,UACR,WAAc,gBA1FlB,EAAKC,MAAQ,CACXd,QAAS,GACTe,YAAY,IALG,E,iFAiGE,IAAD,OAClBC,IAAMC,IAAI,gCACPC,MAAK,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEpB,QAASmB,EAASE,UACnDC,OAAM,kBAAM,EAAKF,SAAS,CAACpB,QAAQ,EAAKa,oB,+BAMnC,IAAD,SAC0BU,KAAKT,MAA9Bd,EADD,EACCA,QAASe,EADV,EACUA,YACXS,EAAkBxB,EAAQyB,QAAO,SAAAzB,GAAO,OAAIA,EAAQC,KAAKyB,cAAcC,SAASZ,EAAYW,gBAAkB1B,EAAQE,WAAWwB,cAAcC,SAASZ,EAAYW,kBAC1K,OACE,yBAAK7B,UAAU,OACb,6BAAK,yBAAKA,UAAU,WAAWC,IAAI,UAAUC,IAAG,mEAChD,kBAAC,EAAD,CAAWS,YAAY,iBAAiBC,cAAe,SAACmB,GAAD,OAAO,EAAKR,SAAS,CAAEL,YAAaa,EAAEC,OAAOC,WAEpG,kBAAC,EAAD,CAAU9B,QAASwB,S,GAnHTO,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.0355979e.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nexport const Card = (props) => (\n    <div className='card-container'>\n        {/* <img alt=\"pokemon\" src={`https://robohash.org/${props.pokemon.id}?set=set2`} /> */}\n        <img alt=\"pokemon\" className='image' src={`https://img.pokemondb.net/artwork/${props.pokemon.name}.jpg`} />\n        <h1 className='txt'>{props.pokemon.name}</h1>\n        <p>{props.pokemon.generation}</p>\n        </div>\n);\n","import React from 'react'\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => {\n    return <div className='card-list'>{props.pokemon.map(pokemon => (\n        <Card key={pokemon.id} pokemon ={pokemon}></Card>\n    ))}</div>;\n}; \n","import React from 'react'\nimport './search.Styles.css'\nexport const SeacrhBox = ({ placeholder, changeHandler }) => \n    (<input type=\"text\"\n        className=\"search\"\n        placeholder={placeholder}\n        onChange={changeHandler}></input>);\n\n\n","import React from 'react';\nimport './App.css';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SeacrhBox } from './component/search-box/searchbox.component';\nimport axios from 'axios';\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      pokemon: [],\n      searchFeild:''\n    }\n  }\n\n  pokemonArray =  [\n      {\n        \"id\": 1,\n        \"name\": \"charizard\",\n        \"generation\": \"Generation3\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"golem\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 3,\n        \"name\": \"snorlax\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 4,\n        \"name\": \"machop\",\n        \"generation\": \"Generation2\"\n      },\n      {\n        \"id\": 5,\n        \"name\": \"geodude\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 6,\n        \"name\": \"bulbasaur\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 7,\n        \"name\": \"raichu\",\n        \"generation\": \"Generation2\"\n      },\n      {\n        \"id\": 8,\n        \"name\": \"sandshrew\",\n        \"generation\": \"Genertion1\"\n      },\n      {\n        \"id\": 9,\n        \"name\": \"pikachu\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 10,\n        \"name\": \"venusaur\",\n        \"generation\": \"Generation3\"\n      },\n      {\n        \"id\": 11,\n        \"name\": \"ivysaur\",\n        \"generation\": \"Generation2\"\n      },\n      {\n        \"id\": 12,\n        \"name\": \"charmander\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 13,\n        \"name\": \"charmeleon\",\n        \"generation\": \"Generation2\"\n      },\n      {\n        \"id\": 14,\n        \"name\": \"squirtle\",\n        \"generation\": \"Generation1\"\n      },\n      {\n        \"id\": 15,\n        \"name\": \"wartortle\",\n        \"generation\": \"Generation2\"\n      },\n      {\n        \"id\": 16,\n        \"name\": \"blastoise\",\n        \"generation\": \"Generation3\"\n      },\n      {\n        \"id\": 17,\n        \"name\": \"rattata\",\n        \"generation\": \"Generation1\"\n      }\n    ]\n  \n  componentDidMount() {\n    axios.get('http://localhost:300/pokemon')\n      .then(response => this.setState({ pokemon: response.data}))\n      .catch(() => this.setState({pokemon:this.pokemonArray}));\n      \n  }\n\n\n\n  render() {\n    const { pokemon, searchFeild } = this.state\n    const filteredPokemon = pokemon.filter(pokemon => pokemon.name.toLowerCase().includes(searchFeild.toLowerCase()) || pokemon.generation.toLowerCase().includes(searchFeild.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <div><img className=\"pokeText\" alt='pokemon' src={`https://miro.medium.com/max/1920/1*UNMAo8su_wbOENW8cjcEiw.png`}></img></div>\n        <SeacrhBox placeholder=\"search pokemon\" changeHandler={(e) => this.setState({ searchFeild: e.target.value })}></SeacrhBox>\n        {/* <input type=\"text\" placeholder=\"search pokemon\" onChange={(e) => this.setState({searchFeild:e.target.value})}></input> */}\n        <CardList pokemon={filteredPokemon}></CardList>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}